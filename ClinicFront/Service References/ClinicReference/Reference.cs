//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClinicFront.ClinicReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClinicContract", Namespace="http://schemas.datacontract.org/2004/07/SampleDataContracts")]
    [System.SerializableAttribute()]
    public partial class ClinicContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string codeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string despField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string code {
            get {
                return this.codeField;
            }
            set {
                if ((object.ReferenceEquals(this.codeField, value) != true)) {
                    this.codeField = value;
                    this.RaisePropertyChanged("code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string desp {
            get {
                return this.despField;
            }
            set {
                if ((object.ReferenceEquals(this.despField, value) != true)) {
                    this.despField = value;
                    this.RaisePropertyChanged("desp");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ClinicReference.IClinicService")]
    public interface IClinicService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClinicService/getclinicData", ReplyAction="http://tempuri.org/IClinicService/getclinicDataResponse")]
        ClinicFront.ClinicReference.ClinicContract getclinicData(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClinicService/getclinicData", ReplyAction="http://tempuri.org/IClinicService/getclinicDataResponse")]
        System.Threading.Tasks.Task<ClinicFront.ClinicReference.ClinicContract> getclinicDataAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClinicService/displayClinicsWithSpecialty", ReplyAction="http://tempuri.org/IClinicService/displayClinicsWithSpecialtyResponse")]
        ClinicFront.ClinicReference.ClinicContract[] displayClinicsWithSpecialty(string specialtyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClinicService/displayClinicsWithSpecialty", ReplyAction="http://tempuri.org/IClinicService/displayClinicsWithSpecialtyResponse")]
        System.Threading.Tasks.Task<ClinicFront.ClinicReference.ClinicContract[]> displayClinicsWithSpecialtyAsync(string specialtyId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IClinicServiceChannel : ClinicFront.ClinicReference.IClinicService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClinicServiceClient : System.ServiceModel.ClientBase<ClinicFront.ClinicReference.IClinicService>, ClinicFront.ClinicReference.IClinicService {
        
        public ClinicServiceClient() {
        }
        
        public ClinicServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ClinicServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClinicServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClinicServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ClinicFront.ClinicReference.ClinicContract getclinicData(string id) {
            return base.Channel.getclinicData(id);
        }
        
        public System.Threading.Tasks.Task<ClinicFront.ClinicReference.ClinicContract> getclinicDataAsync(string id) {
            return base.Channel.getclinicDataAsync(id);
        }
        
        public ClinicFront.ClinicReference.ClinicContract[] displayClinicsWithSpecialty(string specialtyId) {
            return base.Channel.displayClinicsWithSpecialty(specialtyId);
        }
        
        public System.Threading.Tasks.Task<ClinicFront.ClinicReference.ClinicContract[]> displayClinicsWithSpecialtyAsync(string specialtyId) {
            return base.Channel.displayClinicsWithSpecialtyAsync(specialtyId);
        }
    }
}
