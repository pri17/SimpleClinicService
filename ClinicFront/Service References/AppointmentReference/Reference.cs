//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClinicFront.AppointmentReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AppointmentDataContract", Namespace="http://schemas.datacontract.org/2004/07/SampleDataContracts")]
    [System.SerializableAttribute()]
    public partial class AppointmentDataContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string appointTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string appointTypeCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int appointmentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string clinicDespField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string clinicIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string durationCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string durationDespField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string emailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime end_timeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string isCancelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int patientIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long phoneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string specialtyDespField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string specialtyIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime start_timeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string urgentCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string urgentDespField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string appointType {
            get {
                return this.appointTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.appointTypeField, value) != true)) {
                    this.appointTypeField = value;
                    this.RaisePropertyChanged("appointType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string appointTypeCode {
            get {
                return this.appointTypeCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.appointTypeCodeField, value) != true)) {
                    this.appointTypeCodeField = value;
                    this.RaisePropertyChanged("appointTypeCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int appointmentId {
            get {
                return this.appointmentIdField;
            }
            set {
                if ((this.appointmentIdField.Equals(value) != true)) {
                    this.appointmentIdField = value;
                    this.RaisePropertyChanged("appointmentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string clinicDesp {
            get {
                return this.clinicDespField;
            }
            set {
                if ((object.ReferenceEquals(this.clinicDespField, value) != true)) {
                    this.clinicDespField = value;
                    this.RaisePropertyChanged("clinicDesp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string clinicId {
            get {
                return this.clinicIdField;
            }
            set {
                if ((object.ReferenceEquals(this.clinicIdField, value) != true)) {
                    this.clinicIdField = value;
                    this.RaisePropertyChanged("clinicId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string durationCode {
            get {
                return this.durationCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.durationCodeField, value) != true)) {
                    this.durationCodeField = value;
                    this.RaisePropertyChanged("durationCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string durationDesp {
            get {
                return this.durationDespField;
            }
            set {
                if ((object.ReferenceEquals(this.durationDespField, value) != true)) {
                    this.durationDespField = value;
                    this.RaisePropertyChanged("durationDesp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string email {
            get {
                return this.emailField;
            }
            set {
                if ((object.ReferenceEquals(this.emailField, value) != true)) {
                    this.emailField = value;
                    this.RaisePropertyChanged("email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime end_time {
            get {
                return this.end_timeField;
            }
            set {
                if ((this.end_timeField.Equals(value) != true)) {
                    this.end_timeField = value;
                    this.RaisePropertyChanged("end_time");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string isCancel {
            get {
                return this.isCancelField;
            }
            set {
                if ((object.ReferenceEquals(this.isCancelField, value) != true)) {
                    this.isCancelField = value;
                    this.RaisePropertyChanged("isCancel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int patientID {
            get {
                return this.patientIDField;
            }
            set {
                if ((this.patientIDField.Equals(value) != true)) {
                    this.patientIDField = value;
                    this.RaisePropertyChanged("patientID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long phone {
            get {
                return this.phoneField;
            }
            set {
                if ((this.phoneField.Equals(value) != true)) {
                    this.phoneField = value;
                    this.RaisePropertyChanged("phone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string specialtyDesp {
            get {
                return this.specialtyDespField;
            }
            set {
                if ((object.ReferenceEquals(this.specialtyDespField, value) != true)) {
                    this.specialtyDespField = value;
                    this.RaisePropertyChanged("specialtyDesp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string specialtyId {
            get {
                return this.specialtyIdField;
            }
            set {
                if ((object.ReferenceEquals(this.specialtyIdField, value) != true)) {
                    this.specialtyIdField = value;
                    this.RaisePropertyChanged("specialtyId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime start_time {
            get {
                return this.start_timeField;
            }
            set {
                if ((this.start_timeField.Equals(value) != true)) {
                    this.start_timeField = value;
                    this.RaisePropertyChanged("start_time");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string urgentCode {
            get {
                return this.urgentCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.urgentCodeField, value) != true)) {
                    this.urgentCodeField = value;
                    this.RaisePropertyChanged("urgentCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string urgentDesp {
            get {
                return this.urgentDespField;
            }
            set {
                if ((object.ReferenceEquals(this.urgentDespField, value) != true)) {
                    this.urgentDespField = value;
                    this.RaisePropertyChanged("urgentDesp");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DatabaseExceptionContract", Namespace="http://schemas.datacontract.org/2004/07/SampleDataContracts")]
    [System.SerializableAttribute()]
    public partial class DatabaseExceptionContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ResultField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Result {
            get {
                return this.ResultField;
            }
            set {
                if ((this.ResultField.Equals(value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TimeSlotContract", Namespace="http://schemas.datacontract.org/2004/07/SampleDataContracts")]
    [System.SerializableAttribute()]
    public partial class TimeSlotContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime endField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime startField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string timeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime end {
            get {
                return this.endField;
            }
            set {
                if ((this.endField.Equals(value) != true)) {
                    this.endField = value;
                    this.RaisePropertyChanged("end");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime start {
            get {
                return this.startField;
            }
            set {
                if ((this.startField.Equals(value) != true)) {
                    this.startField = value;
                    this.RaisePropertyChanged("start");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string time {
            get {
                return this.timeField;
            }
            set {
                if ((object.ReferenceEquals(this.timeField, value) != true)) {
                    this.timeField = value;
                    this.RaisePropertyChanged("time");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AppointmentReference.IAppointmentService")]
    public interface IAppointmentService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/getAppointmentData", ReplyAction="http://tempuri.org/IAppointmentService/getAppointmentDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ClinicFront.AppointmentReference.DatabaseExceptionContract), Action="http://tempuri.org/IAppointmentService/getAppointmentDataDatabaseExceptionContrac" +
            "tFault", Name="DatabaseExceptionContract", Namespace="http://schemas.datacontract.org/2004/07/SampleDataContracts")]
        ClinicFront.AppointmentReference.AppointmentDataContract getAppointmentData(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/getAppointmentData", ReplyAction="http://tempuri.org/IAppointmentService/getAppointmentDataResponse")]
        System.Threading.Tasks.Task<ClinicFront.AppointmentReference.AppointmentDataContract> getAppointmentDataAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/InsertAppointment", ReplyAction="http://tempuri.org/IAppointmentService/InsertAppointmentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ClinicFront.AppointmentReference.DatabaseExceptionContract), Action="http://tempuri.org/IAppointmentService/InsertAppointmentDatabaseExceptionContract" +
            "Fault", Name="DatabaseExceptionContract", Namespace="http://schemas.datacontract.org/2004/07/SampleDataContracts")]
        void InsertAppointment(int patientID, string clinicId, string specialtyId, string durationCode, string urgentCode, System.DateTime start, System.DateTime end, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/InsertAppointment", ReplyAction="http://tempuri.org/IAppointmentService/InsertAppointmentResponse")]
        System.Threading.Tasks.Task InsertAppointmentAsync(int patientID, string clinicId, string specialtyId, string durationCode, string urgentCode, System.DateTime start, System.DateTime end, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/UpdateAppointment", ReplyAction="http://tempuri.org/IAppointmentService/UpdateAppointmentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ClinicFront.AppointmentReference.DatabaseExceptionContract), Action="http://tempuri.org/IAppointmentService/UpdateAppointmentDatabaseExceptionContract" +
            "Fault", Name="DatabaseExceptionContract", Namespace="http://schemas.datacontract.org/2004/07/SampleDataContracts")]
        bool UpdateAppointment(int appId, int patientID, string clinicId, string specialtyId, string durationCode, string urgentCode, System.DateTime start, System.DateTime end, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/UpdateAppointment", ReplyAction="http://tempuri.org/IAppointmentService/UpdateAppointmentResponse")]
        System.Threading.Tasks.Task<bool> UpdateAppointmentAsync(int appId, int patientID, string clinicId, string specialtyId, string durationCode, string urgentCode, System.DateTime start, System.DateTime end, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/CancelAppointment", ReplyAction="http://tempuri.org/IAppointmentService/CancelAppointmentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ClinicFront.AppointmentReference.DatabaseExceptionContract), Action="http://tempuri.org/IAppointmentService/CancelAppointmentDatabaseExceptionContract" +
            "Fault", Name="DatabaseExceptionContract", Namespace="http://schemas.datacontract.org/2004/07/SampleDataContracts")]
        bool CancelAppointment(int appId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/CancelAppointment", ReplyAction="http://tempuri.org/IAppointmentService/CancelAppointmentResponse")]
        System.Threading.Tasks.Task<bool> CancelAppointmentAsync(int appId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/UndoCancelAppointment", ReplyAction="http://tempuri.org/IAppointmentService/UndoCancelAppointmentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ClinicFront.AppointmentReference.DatabaseExceptionContract), Action="http://tempuri.org/IAppointmentService/UndoCancelAppointmentDatabaseExceptionCont" +
            "ractFault", Name="DatabaseExceptionContract", Namespace="http://schemas.datacontract.org/2004/07/SampleDataContracts")]
        bool UndoCancelAppointment(int appId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/UndoCancelAppointment", ReplyAction="http://tempuri.org/IAppointmentService/UndoCancelAppointmentResponse")]
        System.Threading.Tasks.Task<bool> UndoCancelAppointmentAsync(int appId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/getAllList", ReplyAction="http://tempuri.org/IAppointmentService/getAllListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ClinicFront.AppointmentReference.DatabaseExceptionContract), Action="http://tempuri.org/IAppointmentService/getAllListDatabaseExceptionContractFault", Name="DatabaseExceptionContract", Namespace="http://schemas.datacontract.org/2004/07/SampleDataContracts")]
        System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract> getAllList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/getAllList", ReplyAction="http://tempuri.org/IAppointmentService/getAllListResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract>> getAllListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/getListWithClinicSpecialty", ReplyAction="http://tempuri.org/IAppointmentService/getListWithClinicSpecialtyResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ClinicFront.AppointmentReference.DatabaseExceptionContract), Action="http://tempuri.org/IAppointmentService/getListWithClinicSpecialtyDatabaseExceptio" +
            "nContractFault", Name="DatabaseExceptionContract", Namespace="http://schemas.datacontract.org/2004/07/SampleDataContracts")]
        System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract> getListWithClinicSpecialty(string clinicId, string SpecialtyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/getListWithClinicSpecialty", ReplyAction="http://tempuri.org/IAppointmentService/getListWithClinicSpecialtyResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract>> getListWithClinicSpecialtyAsync(string clinicId, string SpecialtyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/getFreePeriodsNew", ReplyAction="http://tempuri.org/IAppointmentService/getFreePeriodsNewResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ClinicFront.AppointmentReference.DatabaseExceptionContract), Action="http://tempuri.org/IAppointmentService/getFreePeriodsNewDatabaseExceptionContract" +
            "Fault", Name="DatabaseExceptionContract", Namespace="http://schemas.datacontract.org/2004/07/SampleDataContracts")]
        System.Collections.Generic.List<ClinicFront.AppointmentReference.TimeSlotContract> getFreePeriodsNew(string clinicId, string specialtyId, System.DateTime dd, string durationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/getFreePeriodsNew", ReplyAction="http://tempuri.org/IAppointmentService/getFreePeriodsNewResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ClinicFront.AppointmentReference.TimeSlotContract>> getFreePeriodsNewAsync(string clinicId, string specialtyId, System.DateTime dd, string durationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/getFreePeriodsEdit", ReplyAction="http://tempuri.org/IAppointmentService/getFreePeriodsEditResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ClinicFront.AppointmentReference.DatabaseExceptionContract), Action="http://tempuri.org/IAppointmentService/getFreePeriodsEditDatabaseExceptionContrac" +
            "tFault", Name="DatabaseExceptionContract", Namespace="http://schemas.datacontract.org/2004/07/SampleDataContracts")]
        System.Collections.Generic.List<ClinicFront.AppointmentReference.TimeSlotContract> getFreePeriodsEdit(string clinicId, string specialtyId, System.DateTime start, System.DateTime end, string durationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/getFreePeriodsEdit", ReplyAction="http://tempuri.org/IAppointmentService/getFreePeriodsEditResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ClinicFront.AppointmentReference.TimeSlotContract>> getFreePeriodsEditAsync(string clinicId, string specialtyId, System.DateTime start, System.DateTime end, string durationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/getListPatientAsc", ReplyAction="http://tempuri.org/IAppointmentService/getListPatientAscResponse")]
        System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract> getListPatientAsc();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/getListPatientAsc", ReplyAction="http://tempuri.org/IAppointmentService/getListPatientAscResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract>> getListPatientAscAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/getListPatientDesc", ReplyAction="http://tempuri.org/IAppointmentService/getListPatientDescResponse")]
        System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract> getListPatientDesc();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/getListPatientDesc", ReplyAction="http://tempuri.org/IAppointmentService/getListPatientDescResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract>> getListPatientDescAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/getListClinicAsc", ReplyAction="http://tempuri.org/IAppointmentService/getListClinicAscResponse")]
        System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract> getListClinicAsc();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/getListClinicAsc", ReplyAction="http://tempuri.org/IAppointmentService/getListClinicAscResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract>> getListClinicAscAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/getListClinicDesc", ReplyAction="http://tempuri.org/IAppointmentService/getListClinicDescResponse")]
        System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract> getListClinicDesc();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/getListClinicDesc", ReplyAction="http://tempuri.org/IAppointmentService/getListClinicDescResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract>> getListClinicDescAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/getListSpecialtyAsc", ReplyAction="http://tempuri.org/IAppointmentService/getListSpecialtyAscResponse")]
        System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract> getListSpecialtyAsc();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/getListSpecialtyAsc", ReplyAction="http://tempuri.org/IAppointmentService/getListSpecialtyAscResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract>> getListSpecialtyAscAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/getListSpecialtyDesc", ReplyAction="http://tempuri.org/IAppointmentService/getListSpecialtyDescResponse")]
        System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract> getListSpecialtyDesc();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/getListSpecialtyDesc", ReplyAction="http://tempuri.org/IAppointmentService/getListSpecialtyDescResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract>> getListSpecialtyDescAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/getListDurationAsc", ReplyAction="http://tempuri.org/IAppointmentService/getListDurationAscResponse")]
        System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract> getListDurationAsc();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/getListDurationAsc", ReplyAction="http://tempuri.org/IAppointmentService/getListDurationAscResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract>> getListDurationAscAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/getListDurationDesc", ReplyAction="http://tempuri.org/IAppointmentService/getListDurationDescResponse")]
        System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract> getListDurationDesc();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/getListDurationDesc", ReplyAction="http://tempuri.org/IAppointmentService/getListDurationDescResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract>> getListDurationDescAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/getListUrgentAsc", ReplyAction="http://tempuri.org/IAppointmentService/getListUrgentAscResponse")]
        System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract> getListUrgentAsc();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/getListUrgentAsc", ReplyAction="http://tempuri.org/IAppointmentService/getListUrgentAscResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract>> getListUrgentAscAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/getListUrgentDesc", ReplyAction="http://tempuri.org/IAppointmentService/getListUrgentDescResponse")]
        System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract> getListUrgentDesc();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/getListUrgentDesc", ReplyAction="http://tempuri.org/IAppointmentService/getListUrgentDescResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract>> getListUrgentDescAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/getListTypeAsc", ReplyAction="http://tempuri.org/IAppointmentService/getListTypeAscResponse")]
        System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract> getListTypeAsc();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/getListTypeAsc", ReplyAction="http://tempuri.org/IAppointmentService/getListTypeAscResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract>> getListTypeAscAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/getListTypeDesc", ReplyAction="http://tempuri.org/IAppointmentService/getListTypeDescResponse")]
        System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract> getListTypeDesc();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/getListTypeDesc", ReplyAction="http://tempuri.org/IAppointmentService/getListTypeDescResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract>> getListTypeDescAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/getListTimeAsc", ReplyAction="http://tempuri.org/IAppointmentService/getListTimeAscResponse")]
        System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract> getListTimeAsc();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/getListTimeAsc", ReplyAction="http://tempuri.org/IAppointmentService/getListTimeAscResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract>> getListTimeAscAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/getListTimeDesc", ReplyAction="http://tempuri.org/IAppointmentService/getListTimeDescResponse")]
        System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract> getListTimeDesc();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/getListTimeDesc", ReplyAction="http://tempuri.org/IAppointmentService/getListTimeDescResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract>> getListTimeDescAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/getListStatusAsc", ReplyAction="http://tempuri.org/IAppointmentService/getListStatusAscResponse")]
        System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract> getListStatusAsc();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/getListStatusAsc", ReplyAction="http://tempuri.org/IAppointmentService/getListStatusAscResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract>> getListStatusAscAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/getListStatusDesc", ReplyAction="http://tempuri.org/IAppointmentService/getListStatusDescResponse")]
        System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract> getListStatusDesc();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/getListStatusDesc", ReplyAction="http://tempuri.org/IAppointmentService/getListStatusDescResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract>> getListStatusDescAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/getListPatientNameAsc", ReplyAction="http://tempuri.org/IAppointmentService/getListPatientNameAscResponse")]
        System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract> getListPatientNameAsc();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/getListPatientNameAsc", ReplyAction="http://tempuri.org/IAppointmentService/getListPatientNameAscResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract>> getListPatientNameAscAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/getListPatientNameDesc", ReplyAction="http://tempuri.org/IAppointmentService/getListPatientNameDescResponse")]
        System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract> getListPatientNameDesc();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/getListPatientNameDesc", ReplyAction="http://tempuri.org/IAppointmentService/getListPatientNameDescResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract>> getListPatientNameDescAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/filterByPatientName", ReplyAction="http://tempuri.org/IAppointmentService/filterByPatientNameResponse")]
        System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract> filterByPatientName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/filterByPatientName", ReplyAction="http://tempuri.org/IAppointmentService/filterByPatientNameResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract>> filterByPatientNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/filterByClinicName", ReplyAction="http://tempuri.org/IAppointmentService/filterByClinicNameResponse")]
        System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract> filterByClinicName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/filterByClinicName", ReplyAction="http://tempuri.org/IAppointmentService/filterByClinicNameResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract>> filterByClinicNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/filterByDaterange", ReplyAction="http://tempuri.org/IAppointmentService/filterByDaterangeResponse")]
        System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract> filterByDaterange(System.DateTime start1, System.DateTime end1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/filterByDaterange", ReplyAction="http://tempuri.org/IAppointmentService/filterByDaterangeResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract>> filterByDaterangeAsync(System.DateTime start1, System.DateTime end1);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAppointmentServiceChannel : ClinicFront.AppointmentReference.IAppointmentService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AppointmentServiceClient : System.ServiceModel.ClientBase<ClinicFront.AppointmentReference.IAppointmentService>, ClinicFront.AppointmentReference.IAppointmentService {
        
        public AppointmentServiceClient() {
        }
        
        public AppointmentServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AppointmentServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AppointmentServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AppointmentServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ClinicFront.AppointmentReference.AppointmentDataContract getAppointmentData(int id) {
            return base.Channel.getAppointmentData(id);
        }
        
        public System.Threading.Tasks.Task<ClinicFront.AppointmentReference.AppointmentDataContract> getAppointmentDataAsync(int id) {
            return base.Channel.getAppointmentDataAsync(id);
        }
        
        public void InsertAppointment(int patientID, string clinicId, string specialtyId, string durationCode, string urgentCode, System.DateTime start, System.DateTime end, string type) {
            base.Channel.InsertAppointment(patientID, clinicId, specialtyId, durationCode, urgentCode, start, end, type);
        }
        
        public System.Threading.Tasks.Task InsertAppointmentAsync(int patientID, string clinicId, string specialtyId, string durationCode, string urgentCode, System.DateTime start, System.DateTime end, string type) {
            return base.Channel.InsertAppointmentAsync(patientID, clinicId, specialtyId, durationCode, urgentCode, start, end, type);
        }
        
        public bool UpdateAppointment(int appId, int patientID, string clinicId, string specialtyId, string durationCode, string urgentCode, System.DateTime start, System.DateTime end, string type) {
            return base.Channel.UpdateAppointment(appId, patientID, clinicId, specialtyId, durationCode, urgentCode, start, end, type);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateAppointmentAsync(int appId, int patientID, string clinicId, string specialtyId, string durationCode, string urgentCode, System.DateTime start, System.DateTime end, string type) {
            return base.Channel.UpdateAppointmentAsync(appId, patientID, clinicId, specialtyId, durationCode, urgentCode, start, end, type);
        }
        
        public bool CancelAppointment(int appId) {
            return base.Channel.CancelAppointment(appId);
        }
        
        public System.Threading.Tasks.Task<bool> CancelAppointmentAsync(int appId) {
            return base.Channel.CancelAppointmentAsync(appId);
        }
        
        public bool UndoCancelAppointment(int appId) {
            return base.Channel.UndoCancelAppointment(appId);
        }
        
        public System.Threading.Tasks.Task<bool> UndoCancelAppointmentAsync(int appId) {
            return base.Channel.UndoCancelAppointmentAsync(appId);
        }
        
        public System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract> getAllList() {
            return base.Channel.getAllList();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract>> getAllListAsync() {
            return base.Channel.getAllListAsync();
        }
        
        public System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract> getListWithClinicSpecialty(string clinicId, string SpecialtyId) {
            return base.Channel.getListWithClinicSpecialty(clinicId, SpecialtyId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract>> getListWithClinicSpecialtyAsync(string clinicId, string SpecialtyId) {
            return base.Channel.getListWithClinicSpecialtyAsync(clinicId, SpecialtyId);
        }
        
        public System.Collections.Generic.List<ClinicFront.AppointmentReference.TimeSlotContract> getFreePeriodsNew(string clinicId, string specialtyId, System.DateTime dd, string durationId) {
            return base.Channel.getFreePeriodsNew(clinicId, specialtyId, dd, durationId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ClinicFront.AppointmentReference.TimeSlotContract>> getFreePeriodsNewAsync(string clinicId, string specialtyId, System.DateTime dd, string durationId) {
            return base.Channel.getFreePeriodsNewAsync(clinicId, specialtyId, dd, durationId);
        }
        
        public System.Collections.Generic.List<ClinicFront.AppointmentReference.TimeSlotContract> getFreePeriodsEdit(string clinicId, string specialtyId, System.DateTime start, System.DateTime end, string durationId) {
            return base.Channel.getFreePeriodsEdit(clinicId, specialtyId, start, end, durationId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ClinicFront.AppointmentReference.TimeSlotContract>> getFreePeriodsEditAsync(string clinicId, string specialtyId, System.DateTime start, System.DateTime end, string durationId) {
            return base.Channel.getFreePeriodsEditAsync(clinicId, specialtyId, start, end, durationId);
        }
        
        public System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract> getListPatientAsc() {
            return base.Channel.getListPatientAsc();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract>> getListPatientAscAsync() {
            return base.Channel.getListPatientAscAsync();
        }
        
        public System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract> getListPatientDesc() {
            return base.Channel.getListPatientDesc();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract>> getListPatientDescAsync() {
            return base.Channel.getListPatientDescAsync();
        }
        
        public System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract> getListClinicAsc() {
            return base.Channel.getListClinicAsc();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract>> getListClinicAscAsync() {
            return base.Channel.getListClinicAscAsync();
        }
        
        public System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract> getListClinicDesc() {
            return base.Channel.getListClinicDesc();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract>> getListClinicDescAsync() {
            return base.Channel.getListClinicDescAsync();
        }
        
        public System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract> getListSpecialtyAsc() {
            return base.Channel.getListSpecialtyAsc();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract>> getListSpecialtyAscAsync() {
            return base.Channel.getListSpecialtyAscAsync();
        }
        
        public System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract> getListSpecialtyDesc() {
            return base.Channel.getListSpecialtyDesc();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract>> getListSpecialtyDescAsync() {
            return base.Channel.getListSpecialtyDescAsync();
        }
        
        public System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract> getListDurationAsc() {
            return base.Channel.getListDurationAsc();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract>> getListDurationAscAsync() {
            return base.Channel.getListDurationAscAsync();
        }
        
        public System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract> getListDurationDesc() {
            return base.Channel.getListDurationDesc();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract>> getListDurationDescAsync() {
            return base.Channel.getListDurationDescAsync();
        }
        
        public System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract> getListUrgentAsc() {
            return base.Channel.getListUrgentAsc();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract>> getListUrgentAscAsync() {
            return base.Channel.getListUrgentAscAsync();
        }
        
        public System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract> getListUrgentDesc() {
            return base.Channel.getListUrgentDesc();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract>> getListUrgentDescAsync() {
            return base.Channel.getListUrgentDescAsync();
        }
        
        public System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract> getListTypeAsc() {
            return base.Channel.getListTypeAsc();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract>> getListTypeAscAsync() {
            return base.Channel.getListTypeAscAsync();
        }
        
        public System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract> getListTypeDesc() {
            return base.Channel.getListTypeDesc();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract>> getListTypeDescAsync() {
            return base.Channel.getListTypeDescAsync();
        }
        
        public System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract> getListTimeAsc() {
            return base.Channel.getListTimeAsc();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract>> getListTimeAscAsync() {
            return base.Channel.getListTimeAscAsync();
        }
        
        public System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract> getListTimeDesc() {
            return base.Channel.getListTimeDesc();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract>> getListTimeDescAsync() {
            return base.Channel.getListTimeDescAsync();
        }
        
        public System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract> getListStatusAsc() {
            return base.Channel.getListStatusAsc();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract>> getListStatusAscAsync() {
            return base.Channel.getListStatusAscAsync();
        }
        
        public System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract> getListStatusDesc() {
            return base.Channel.getListStatusDesc();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract>> getListStatusDescAsync() {
            return base.Channel.getListStatusDescAsync();
        }
        
        public System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract> getListPatientNameAsc() {
            return base.Channel.getListPatientNameAsc();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract>> getListPatientNameAscAsync() {
            return base.Channel.getListPatientNameAscAsync();
        }
        
        public System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract> getListPatientNameDesc() {
            return base.Channel.getListPatientNameDesc();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract>> getListPatientNameDescAsync() {
            return base.Channel.getListPatientNameDescAsync();
        }
        
        public System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract> filterByPatientName(string name) {
            return base.Channel.filterByPatientName(name);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract>> filterByPatientNameAsync(string name) {
            return base.Channel.filterByPatientNameAsync(name);
        }
        
        public System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract> filterByClinicName(string name) {
            return base.Channel.filterByClinicName(name);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract>> filterByClinicNameAsync(string name) {
            return base.Channel.filterByClinicNameAsync(name);
        }
        
        public System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract> filterByDaterange(System.DateTime start1, System.DateTime end1) {
            return base.Channel.filterByDaterange(start1, end1);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ClinicFront.AppointmentReference.AppointmentDataContract>> filterByDaterangeAsync(System.DateTime start1, System.DateTime end1) {
            return base.Channel.filterByDaterangeAsync(start1, end1);
        }
    }
}
